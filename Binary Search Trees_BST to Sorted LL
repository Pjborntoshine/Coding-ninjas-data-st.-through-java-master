public class Solution {

    /*	Binary Tree Node class 
 * 
 * 	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/

    /* LinkedList Node Class
*
*	
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
*/

    public static LinkedListNode<Integer> BSTToSortedLL(BinaryTreeNode<Integer> root){
        /* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        Pair ans=helper(root);
        return ans.head;}
    public static Pair helper(BinaryTreeNode<Integer> root){
        if(root==null)
        {
            Pair output=new Pair();
            output.head=null;
            output.tail=null;
            return output;
        }
        Pair lefttree=helper(root.left);
        LinkedListNode<Integer> newNode=new LinkedListNode<>(root.data);
        Pair righttree=helper(root.right);
        Pair output=new Pair();
       if(lefttree.head!=null)
       {
           output.head=lefttree.head;
           lefttree.tail.next=newNode;
        
       }
        else {
            output.head=newNode;
        }
    newNode.next=righttree.head;
        if(righttree.head==null)
        {
            output.tail=newNode;
            
        }
        else{
            output.tail=righttree.tail;
        }
        return output;
}}
class Pair{
    LinkedListNode<Integer> head;
    LinkedListNode<Integer> tail;
}


